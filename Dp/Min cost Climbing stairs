RECURSIVE SOLUTION*************
class Solution {
public:
// RECURSOVE SOLUTION TLE
//i can either  come by taking 0 step 1
int solve(vector<int>& cost, int n){
    //n is the step
    //base case qqould be 
    if(n==0) return cost[0];
    if(n==1) return cost[1];
    int ans=cost[n]+min(solve(cost,n-1),solve(cost,n-2));
// The min() function is used to find the minimum cost between the two possibilities:

// Take one step from the previous step n-1 and add the cost of the current step (cost[n]).
// Take two steps from the step before the previous step n-2 and add the cost of the current step (cost[n]).
    return ans;
}
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        int ans=min(solve(cost,n-1),solve(cost,n-2));
        return ans;
    }
};

DYNAMICPROGRAMMING SOLUTION ****************
class Solution {
public:
// RECURSOVE SOLUTION TLE
//i can either  come by taking 0 step 1
int solve(vector<int>& cost, int n,vector<int>& dp){
    //n is the step
    //base case qqould be 
    if(n==0) return cost[0];
    if(n==1) return cost[1];
    if(dp[n]!=-1) return dp[n];
    dp[n]=cost[n]+min(solve(cost,n-1,dp),solve(cost,n-2,dp));
// The min() function is used to find the minimum cost between the two possibilities:

// Take one step from the previous step n-1 and add the cost of the current step (cost[n]).
// Take two steps from the step before the previous step n-2 and add the cost of the current step (cost[n]).
    return dp[n];
}
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        vector<int> dp(n+1,-1);

        int ans=min(solve(cost,n-1,dp),solve(cost,n-2,dp));
        return ans;
    }
};

TABULATION *************************

class Solution {
public:
int solve(vector<int>& cost,int n){
    //step array creation
    vector<int> dp(n+1);
    dp[0]=cost[0];
    dp[1]=cost[1];
    //3 step
    for(int i=2;i<=n-1;i++){
        dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
    }
    return min(dp[n-1], dp[n-2]);
// return min(dp[n-1], dp[n-2]) is used to determine the minimum cost of reaching the top of the stairs considering the last two steps.
// The min(dp[n-1], dp[n-2]) expression calculates the minimum cost between these two options.
//  It considers whether it is more cost-effective to take one step from the second-to-last step or two steps from the step before the second-to-last step.
}
    int minCostClimbingStairs(vector<int>& cost) {
        return solve(cost,cost.size());
    }
};
SPACE OPTIMIZATION********************
class Solution {
public:
int solve(vector<int>& cost,int n){
    int prev2=cost[0];
    int prev1=cost[1];
    //3 step
    for(int i=2;i<=n-1;i++){
     int curr=cost[i]+min(prev1,prev2);
      prev2=prev1;
      prev1=curr;
    }
    return min(prev1,prev2);
}
    int minCostClimbingStairs(vector<int>& cost) {
        return solve(cost,cost.size());
    }
};
