class Solution {
public:
//so i can either include that house
//or i caan skip to the next
//when i iclude that house i cant go to next house so -> i+2 + money in that house
//when i exclude i can move to adjacent house so i->i+1

    // int rec(vector<int>& nums, int i) {
    //     // Base cases
    //     if(i>=nums.size()) return 0;
    //      if (i == nums.size() - 1) return nums[i];
    //     // Recursive cases
    //     int inc = rec(nums, i + 2) + nums[i];
    //     int exc = rec(nums, i + 1);

    //     return max(inc, exc);
    // }

    // int memo(vector<int>& nums, int i,vector<int>& dp) {
    //     // Base cases
    //     if(i>=nums.size()) return 0;
    //      if (i == nums.size() - 1) return nums[i];
    //     // Recursive cases
    //     if(dp[i]!=-1) return dp[i];
    //     int inc = memo(nums, i + 2,dp) + nums[i];
    //     int exc = memo(nums, i + 1,dp);

    //     dp[i]= max(inc, exc);
    //     return dp[i];
    // }

    // int tab(vector<int>& nums, vector<int>& dp){
    //     //in tabulation
        
    //     dp[0]=0;
    //     dp[1]=max(nums[0],nums[1]);
    // //iterating for every house
    //     for(int i=2;i<nums.size();i++){
    //      int inc = dp[i-2]+ nums[i];
    //     int exc = dp[i-1]+0;
    //     dp[i]= max(inc, exc);
    //     }
    //     return dp[nums.size()-1];
    // }

    // int rob(vector<int>& nums) {
    //     if(nums.size() == 1)  return nums[0];
    //     vector<int>dp(nums.size()+1,0);
    //     return tab(nums,dp);
    // }
//     int rob(vector<int>& nums) {
//     int n = nums.size();
    
//     if (n == 0) return 0;
//     if (n == 1) return nums[0];
    
//     // dp[i] represents the maximum amount of money that can be robbed from houses 0 to i
//     vector<int> dp(n, 0);
    
//     // Base cases
//     dp[0] = nums[0];
//     dp[1] = max(nums[0], nums[1]);
    
//     // Calculate the maximum amount of money for houses 2 to n-1
//     for (int i = 2; i < n; i++) {
//         dp[i] = max(dp[i - 2] + nums[i], dp[i - 1]);
//     }
    
//     return dp[n - 1];
// }

int rob(vector<int>& nums) {
    int n = nums.size();
    
    if (n == 0) return 0;
    if (n == 1) return nums[0];
    
    // Base cases
    int prev = nums[0];
    int prev2 = max(nums[0], nums[1]);
    
    // Calculate the maximum amount of money for houses 2 to n-1
    for (int i = 2; i < n; i++) {
       int ans = max(prev + nums[i], prev2);
       prev = prev2;
       prev2 = ans;
    }
    
    return prev2;
}




};
