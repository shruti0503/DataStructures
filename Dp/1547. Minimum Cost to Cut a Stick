class Solution {
public:
int f(int i,int j, vector<int>& cuts){
    if(i>j) return 0;

    int mini=INT_MAX;
    

   for (int ind = i; ind <= j; ind++) {
            int cost = cuts[j + 1] - cuts[i - 1] + f(i, ind - 1, cuts) + f(ind + 1, j, cuts);
            mini = min(mini, cost);
        }
    return mini;
}
    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(),0);
        sort(cuts.begin(),cuts.end());
        return f(1,cuts.size()-2,cuts);
        
    }
};

class Solution {
public:
    int f(int i, int j, vector<int>& cuts, vector<vector<int>>& dp) {
        if (i > j)
            return 0;

        if (dp[i][j] != -1)
            return dp[i][j];

        int mini = INT_MAX;
        for (int ind = i; ind <= j; ind++) {
            int cost = cuts[j + 1] - cuts[i - 1] + f(i, ind - 1, cuts, dp) + f(ind + 1, j, cuts, dp);
            if (dp[i][j] == -1)
                dp[i][j] = cost;
            else
                dp[i][j] = min(dp[i][j], cost);
        }
        return dp[i][j];
    }

    int minCost(int n, vector<int>& cuts) {
        cuts.push_back(n);
        cuts.insert(cuts.begin(), 0);
        sort(cuts.begin(), cuts.end());
        vector<vector<int>> dp(cuts.size(), vector<int>(cuts.size(), -1));
        return f(1, cuts.size() - 2, cuts, dp);
    }
};
